{{- $tmstoreimage := .tmstore}}
{{- $tmpopstore := (input "tmpopUnderlyingStore") -}}
{{- $require_postgresql := (eq $tmpopstore "postgrestmpop") -}}
{{- $postgresimage := .postgres}}
{{- $require_rethinkdb := (eq $tmpopstore "rethinktmpop") -}}
{{- $rethinkdbimage := .rethinkdb}}
{{- $fossilizers := (input "developmentFossilizer") -}}
{{- $clusterSize := (input "clusterSize") -}}
{{- $activateMonitoring := (input "monitoring") -}}
version: '3'
services:
  dial:
    build:
      context: ./dial
    image: {{input "dockerorg"}}/dial_seeds:latest
    depends_on:
{{- range $i, $_ := loop 0 $clusterSize}}
    - tmapp{{(add 1 $i)}}
{{- end}}
  agent:
    image: {{.agentsample}}
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    depends_on:
{{- range $i, $_ := loop 0 $clusterSize}}
{{- $node := add 1 $i}}
    - store{{$node}}
    - tmapp{{$node}}
{{- end}}
{{- range $i, $fossilizer := $fossilizers}}
    - {{$fossilizer}}
{{- end}}
{{- $tmpopstoreimage := index . $tmpopstore}}
{{- range $i, $_ := loop 0 $clusterSize}}
{{- $node := add 1 $i}}
  store{{$node}}:
    image: {{$tmstoreimage}}
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    command: [tmstore, -endpoint, "tcp://tmapp{{$node}}:46657", "-monitoring.active={{$activateMonitoring}}"]
    depends_on:
    - tmapp{{$node}}
{{- if $require_postgresql }}
    - postgres{{$node}}
{{- else if $require_rethinkdb }}
    - rethinkdb{{$node}}
{{- end}}
{{- if $require_postgresql }}
  postgres{{$node}}:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{$postgresimage}}
{{- end}}
{{- if $require_rethinkdb }}
  rethinkdb{{$node}}:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{$rethinkdbimage}}
{{- end}}
  tmapp{{$node}}:
    image: {{$tmpopstoreimage}}
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
{{- if $require_postgresql }}
    command: [{{$tmpopstore}}, -home, "/data/tendermint", "-create_empty_blocks=false", "-unsafe", "-url", "postgres://postgres@postgres{{$node}}/postgres?sslmode=disable", "-monitoring.active={{$activateMonitoring}}"]
{{- else if $require_rethinkdb }}
    command: [{{$tmpopstore}}, -home, "/data/tendermint", "-create_empty_blocks=false", "-unsafe", "-url", "rethinkdb{{$node}}:28015", "-monitoring.active={{$activateMonitoring}}"]
{{- else }}
    command: [{{$tmpopstore}}, -home, "/data/tendermint", "-create_empty_blocks=false", "-unsafe", "-monitoring.active={{$activateMonitoring}}"]
{{- end}}
    volumes:
    - ./validation:/data/validation
{{- end}}
{{- $root := . }}
{{- range $i, $fossilizer := $fossilizers}}
  {{$fossilizer}}:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{index $root $fossilizer }}
    command: [{{$fossilizer}}, -http, ":{{(add 6000 $i)}}"]
{{- end}}
{{- if eq (input `monitoring`) `true` }}

  ##### Monitoring #####

  # Prometheus collects metrics
  prometheus:
    image: prom/prometheus
    depends_on:
      - cadvisor
      - node-exporter
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: always

  # Node-exporter exports machine-level metrics
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs|rootfs/run/user)($$|/)"
    ports:
      - 9100:9100
    restart: always

  # Cadvisor exports docker container metrics
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    restart: always

  # Grafana exposes dashboards to visualize metrics
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - 7000:3000
    restart: always
  
  jaeger:
    # This keeps tracing in memory only.
    # It's fine for development, but for production you'll need
    # to configure jaeger with a proper storage backend.
    image: jaegertracing/all-in-one
    ports:
      - 14268:14268
      - 16686:16686
    restart: always
{{- end}}