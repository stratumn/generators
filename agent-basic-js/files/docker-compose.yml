{{- $store := (input "developmentStore") -}}
{{- $require_tmstore := (eq $store "tmstore") -}}
{{- if $require_tmstore -}}
{{- $tmstore := (input "tmpopUnderlyingStore") -}}
{{- end -}}
{{- $require_postgresql := (eq $store "postgresstore") -}}
{{- $require_rethinkdb := (eq $store "rethinkstore") -}}
{{- $require_elasticsearch := (eq $store "elasticsearchstore") -}}
{{- $require_couchdb := (eq $store "couchstore") -}}
{{- $fossilizers := (input "developmentFossilizer") -}}
{{- $activateMonitoring := (input "monitoring") -}}
version: '3'
services:
  agent:
    build:
      context: ./agent
    image: {{input "dockerorg"}}/{{input "name"}}-agent-js
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    volumes:
    - ./agent:/src/server
    depends_on:
    - store
{{- range $i, $fossilizer := $fossilizers}}
    - {{$fossilizer}}
{{- end}}
  store:
    image: {{index . $store}}
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
{{- if $require_tmstore }}
    command: [tmstore, -endpoint, "tcp://tmnode:46657", "-monitoring.active={{$activateMonitoring}}"]
    depends_on:
    - tmnode
{{- $tmstore := (input "tmpopUnderlyingStore") }}
{{- if eq $tmstore "postgrestmpop" }}
    - postgres
{{- else if eq $tmstore "rethinktmpop" }}
    - rethinkdb
{{- else if eq $tmstore "elasticsearchtmpop" }}
    - elasticsearch
{{- end}}
{{- else if $require_couchdb}}
    command: [{{$store}}, -endpoint, "http://couchdb:5984", "-monitoring.active={{$activateMonitoring}}"]
{{- else if eq $store "fabricstore" }}
    user: root
    environment:
      - CLIENT_CONFIG_PATH=/var/stratumn/fabricstore/client-config.yaml
      - CHANNEL_ID=mychannel
      - CHAINCODE_ID=pop
    volumes:
      - ./fabric/crypto-config:/var/stratumn/fabricstore/crypto-config
      - ./fabric/client-config/client-config.yaml:/var/stratumn/fabricstore/client-config.yaml
    depends_on:
      - peer0.org1.example.com
{{- else}}
    command: [{{$store}}, "-monitoring.active={{$activateMonitoring}}"]    
{{- end}}
{{- /* Ugly if cascade and DRY */}}
{{- /* https://github.com/stratumn/generators/issues/31 */}}
{{- if $require_postgresql }}
    depends_on:
    - postgres
  postgres:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.postgres}}
{{- else if $require_tmstore }}
{{- if eq (input "tmpopUnderlyingStore") "postgrestmpop" }}
  postgres:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.postgres}}
{{- end}}
{{- end}}
{{- if $require_rethinkdb }}
    depends_on:
    - rethinkdb
  rethinkdb:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.rethinkdb}}
{{- else if $require_tmstore }}
{{- if eq (input "tmpopUnderlyingStore") "rethinktmpop" }}
  rethinkdb:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.rethinkdb}}
{{- end}}
{{- end}}
{{- if $require_elasticsearch }}
    depends_on:
    - elasticsearch
  elasticsearch:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.elasticsearch}}
{{- else if $require_tmstore }}
{{- if eq (input "tmpopUnderlyingStore") "elasticsearchtmpop" }}
  elasticsearch:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.elasticsearch}}
{{- end}}
{{- end}}
{{- /* End of ugly if cascade and DRY */}}
{{- if $require_couchdb }}
    depends_on:
    - couchdb
  couchdb:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{.couchdb}}
    volumes:
    - ./data:/opt/couchdb/data
{{- end}}
{{- if $require_tmstore }}
{{- $tmstore := (input "tmpopUnderlyingStore") }}
  tmnode:
    image: {{index . $tmstore}}
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    command: [{{$tmstore}}, -home, "/data/tendermint", "-monitoring.active={{$activateMonitoring}}"]
    volumes:
    - ./validation:/data/validation
{{- end}}
{{- $root := . }}
{{- range $i, $fossilizer := $fossilizers}}
  {{$fossilizer}}:
    env_file:
    - ./config/common.env
    - ./config/common.secret.env
    image: {{index $root $fossilizer }}
    command: [{{$fossilizer}}, -http, ":{{(add 6000 $i)}}", "-monitoring.active={{$activateMonitoring}}"]
{{- end}}
{{- if eq (input `monitoring`) `true` }}

  ##### Monitoring #####

  # Prometheus collects metrics
  prometheus:
    image: prom/prometheus
    depends_on:
      - cadvisor
      - node-exporter
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: always

  # Node-exporter exports machine-level metrics
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs|rootfs/run/user)($$|/)"
    ports:
      - 9100:9100
    restart: always

  # Cadvisor exports docker container metrics
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    restart: always

  # Grafana exposes dashboards to visualize metrics
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - 7000:3000
    restart: always
  
  jaeger:
    # This keeps tracing in memory only.
    # It's fine for development, but for production you'll need
    # to configure jaeger with a proper storage backend.
    image: jaegertracing/all-in-one
    ports:
      - 14268:14268
      - 16686:16686
    restart: always
{{- end}}